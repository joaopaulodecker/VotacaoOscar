from Limites.TelaMembroAcademia import TelaMembroAcademia

class ControladorMembros:
    """
    Gerencia as opera√ß√µes relacionadas aos membros da academia.

    Esta classe √© respons√°vel por adicionar, listar e buscar membros.
    Ela interage com TelaMembroAcademia para a interface com o usu√°rio,
    embora os m√©todos de menu e CRUD completos n√£o estejam implementados
    diretamente nesta vers√£o da classe (comparado ao ControladorCadastro).
    Os membros s√£o armazenados como dicion√°rios em uma lista interna.

    Atributos:
        __membros (list): Lista de dicion√°rios, onde cada dicion√°rio representa um membro.
        __tela (TelaMembroAcademia): Inst√¢ncia da tela para intera√ß√£o com o usu√°rio
                                     relacionada a membros.
        """
    def __init__(self):
        self.__membros = []
        self.__tela = TelaMembroAcademia()

    def adicionar_membro(self, membro):
        """
        Adiciona um novo membro √† lista de membros, se o ID ainda n√£o existir.
        :param:
            membro (dict): Um dicion√°rio contendo os dados do membro a ser adicionado.
                           Espera-se que o dicion√°rio contenha ao menos as chaves 'id' e 'nome'.

        :return:
            bool: True se o membro foi adicionado com sucesso, False caso contr√°rio
                  (por exemplo, se o ID do membro j√° existir).
        """
        if self.existe_id(membro["id"]):
            print(f"‚ùå Membro com ID {membro['id']} j√° registrado!")
            input("üîÅ Pressione Enter para continuar...")
            return False
        else:
            self.__membros.append(membro)
            print(f"‚úÖ Membro {membro['nome']} cadastrado com sucesso!")
            input("üîÅ Pressione Enter para continuar...")
            return True

    def existe_id(self, id_busca):
        """
        Verifica se um membro com o ID especificado j√° existe na lista.
         :return: True se um membro com o ID fornecido for encontrado, False caso contr√°rio.
        """
        for membro_dict in self.__membros:
            if membro_dict.get("id") == id_busca:
                return True
        return False

    def listar_membros(self, mostrar_msg_voltar=False):
        """
        Exibe uma lista de todos os membros cadastrados.
        Para cada membro, mostra o ID, nome e, se dispon√≠vel, a fun√ß√£o.
        """
        if not self.__membros:
            print("üì≠ Nenhum membro cadastrado.")
        else:
            print("\nüë• Lista de Membros:")
            for membro in self.__membros:
                funcao_str = f" | Fun√ß√£o: {membro.get('funcao', 'N/A').capitalize()}" if 'funcao' in membro else ""
                print(f"ID: {membro['id']} | Nome: {membro['nome']}{funcao_str}")
        if mostrar_msg_voltar:
            input("üîÅ Pressione Enter para voltar ao menu...")

    def get_diretores_info(self) -> list[dict]:
        """
        Retorna uma lista de dicion√°rios contendo ID e nome de todos os membros
        que t√™m a fun√ß√£o de "diretor".
        Esta fun√ß√£o √© √∫til para, por exemplo, listar diretores dispon√≠veis ao
        cadastrar um filme.
        :return:        list[dict]: Lista de dicion√°rios, cada um com as chaves 'id' e 'nome'
                        dos membros que s√£o diretores. Retorna lista vazia se
                        nenhum diretor for encontrado.
        """
        diretores_info = []
        for membro_dict in self.__membros:
            if membro_dict.get("funcao") == "diretor":
                diretores_info.append({
                    "id": membro_dict.get("id"),
                    "nome": membro_dict.get("nome")
                })
        return diretores_info

    def get_membro_por_id(self, id_membro_busca) -> dict | None:
        """
        Busca e retorna um membro da lista pelo seu ID.
        :param id_membro_busca: O ID do membro a ser procurado.
        :return:  dict | None: O dicion√°rio contendo os dados do membro, se encontrado.
                         Retorna None se nenhum membro com o ID especificado for encontrado.
        """
        for membro_dict in self.__membros:
            if membro_dict.get("id") == id_membro_busca:
                return membro_dict
        return None